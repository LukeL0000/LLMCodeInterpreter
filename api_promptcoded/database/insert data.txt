INSERT INTO Users(username, name, password, role)
VALUES ('TestUser', 'Test User', 'test123', 'Student'), ('TestUser2', 'Test User 2', 'test123', 'Student'), ('Instructor', 'Instructor Name', 'test123', 'Instructor');

INSERT INTO CodeSamples(code_sample_id, sample_code, code_description, unit_tests)
VALUES 	
(1, 
'function codeSample1 (foo, bar) 
{ 
	return foo + bar;
}', 
'Adds 2 numbers', 
'{
	"codeSample":	"codeSample1",
	"inputs": 	[
			{"testCase": 1, "foo": 4, "bar": 5},
			{"testCase": 2, "foo": 0, "bar": 4},
			{"testCase": 3, "foo": -1, "bar": -2}
		 	],
	"outputs":	[
			{"testCase": 1, "returnVal": 9}, 
			{"testCase": 2, "returnVal": 4},
			{"testCase": 3, "returnVal": -3}
			]
}'),

(2, 
'function codeSample2 (foo, bar) 
{ 
	let tempString = "";
	for(int i = 0; i < bar; i++) {
		tempString += foo[i];
	}
	return tempString; 
}', 
'Takes str foo, int bar, gets first bar chars of foo', 
'{
	"codeSample":	"codeSample2",
	"inputs": 	[
			{"testCase": 1, "foo": "hello world", "bar": 5},
			{"testCase": 2, "foo": "lunch time", "bar": 0},
			{"testCase": 3, "foo": "cpsc 310", "bar": 4}
		 	],
	"outputs":	[
			{"testCase": 1, "returnVal": "hello"}, 
			{"testCase": 2, "returnVal": ""},
			{"testCase": 3, "returnVal": "cpsc"}
			]
}'),

(4,
'function codeSample4 (foo, bar)
{
	for (let i = 0; i < foo.length(); i ++) {
		if (foo[i] === bar) {
			return true;
		}
	}
	return false;
}',
'Returns true if int bar in array foo, else false', 
'{
	"codeSample":	"codeSample4",
	"inputs": 	[
			{"testCase": 1, "foo": [0, 1, 2, 3, 4], "bar": 5},
			{"testCase": 2, "foo": [4, 1, 99, 100], "bar": 100},
			{"testCase": 3, "foo": [-1, -5, 0, 5, 1], "bar": -5}
		 	],
	"outputs":	[
			{"testCase": 1, "returnVal": false}, 
			{"testCase": 2, "returnVal": true},
			{"testCase": 3, "returnVal": true}
			]
}'),

(5,
'function codeSample5(foo) {

    let returnVal = ""

    for( let i = foo.length - 1; i >= 0; i-- ) {
        returnVal += foo[i];
    }

    return returnVal;
}',
'Takes a string and reverses it', 
'{
	"codeSample":	"codeSample5",
	"inputs": 	[
			{"testCase": 1, "foo": "hello world"},
			{"testCase": 2, "foo": "racecar"},
			{"testCase": 3, "foo": "a"}
		 	],
	"outputs":	[
			{"testCase": 1, "returnVal": "dlrow olleh"}, 
			{"testCase": 2, "returnVal": "racecar"},
			{"testCase": 3, "returnVal": "a"}
			]
}'),

(6,
'function codeSample6(foo, bar) {
    let returnVal = [];

    for(let i = 0; i < foo.length; i ++) {
        returnVal.push(foo[i]);
    }

    for(let i = 0; i < bar.length; i ++) {
        returnVal.push(bar[i]);
    }

    return returnVal;
}',
'Merges two arrays', 
'{
	"codeSample":	"codeSample6",
	"inputs": 	[
			{"testCase": 1, "foo": [1, 2, 3], "bar": [4, 5, 6]},
			{"testCase": 2, "foo": [3, 2, 1], "bar": []},
			{"testCase": 3, "foo": [], "bar": []}
		 	],
	"outputs":	[
			{"testCase": 1, "returnVal": [1, 2, 3, 4, 5, 6]}, 
			{"testCase": 2, "returnVal": [3, 2, 1]},
			{"testCase": 3, "returnVal": []}
			]
}'),

(7,
'function codeSample7(foo) {
    let returnVal = "";

    for(let i = 0; i < foo.length; i++) {
        returnVal += foo[i];
    }

    return returnVal;
}',
'Prints an array as a string', 
'{
	"codeSample":	"codeSample7",
	"inputs": 	[
			{"testCase": 1, "foo": ["h", "e", "l", "l", "o", " ", "w", "o", "r", "l", "d"]},
			{"testCase": 2, "foo": ["aloha ", "my ", "friend"]},
			{"testCase": 3, "foo": []}
		 	],
	"outputs":	[
			{"testCase": 1, "returnVal": "hello world"}, 
			{"testCase": 2, "returnVal": "aloha my friend"},
			{"testCase": 3, "returnVal": ""}
			]
}'),

(8,
'function codeSample8(foo) {
    if (foo <= 0) return [];
    if (foo === 1) return [0];

    //hint: these are the first 2 numbers in the fibonacci sequence
    let returnVal = [0, 1];

    //start counting from 3rd index
    for (let i = 2; i < foo; i++) {
        returnVal.push(returnVal[i - 1] + returnVal[i - 2]);
    }

    return returnVal;
}',
'Returns a list of the first foo numbers in the fibonacci sequence', 
'{
	"codeSample":	"codeSample8",
	"inputs": 	[
			{"testCase": 1, "foo": 1},
			{"testCase": 2, "foo": 2},
			{"testCase": 3, "foo": 10}
		 	],
	"outputs":	[
			{"testCase": 1, "returnVal": [0]}, 
			{"testCase": 2, "returnVal": [0, 1]},
			{"testCase": 3, "returnVal": [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]}
			]
}')
;

INSERT INTO Attempts (attempt_id, username, code_sample_id, timestamp, test_result, llm_code, user_description, ticket_comment, flagged)
VALUES 
(1, 'TestUser', 1, '2024-07-01',  1, 'test code 0', 'test desc', 'test comment', 0),
(2, 'TestUser', 1, '2024-07-01',  0, 'test code 1', 'test desc', 'test comment', 0),
(3, 'TestUser2', 1, '2024-07-01',  1, 'test code 0', 'test desc', 'test comment', 0),
(4, 'TestUser', 1, '2024-07-01',  0, 'test code 0', 'test desc', 'test comment', 1),
(5, 'TestUser', 2, '2024-07-01',  0, 'test code 1', 'test desc', 'test comment', 1),
(6, 'TestUser', 3, '2024-07-01',  0, 'test code 1', 'test desc', 'test comment', 1),
(7, 'TestUser2', 2, '2024-07-01',  0, 'test code 0', 'test desc', 'test comment', 1);