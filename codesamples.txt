- Arithmetic
- Condition Statements and Iteration
- String Manipulation
- Object Oriented Programming
- List, tuple, dictionary
- Searching and Sorting

Arithmetic:

```python
def arithmetic1(parameter1, parameter2, parameter3):
	parameter1 = 0
	parameter2 = parameter2 + parameter2
	parameter3 = parameter2
	return parameter3
```

```python
def arithmetic2(parameter1, parameter2, parameter3):
	parameter1 = parameter2 + parameter3 
	parameter2 = parameter1 + parameter2
	parameter3 = parameter2 - parameter3
	return parameter3
```

Condition Statements and Iteration:

```python
def condition_statement1(parameter1, parameter2, parameter3):
	if(parameter1 % 2 == 1):
		if(parameter2 % 2 == 1):
			if(parameter3 % 2 == 0):
				return True
	return False
```

```python
def condition_statement2(parameter1, parameter2, parameter3):
	if((parameter1 >= parameter2) and (parameter1 >= parameter3)):
		return parameter1
	else:
		if parameter2 >= parameter3:
			return parameter2
```

```python
def iteration1(parameter1):
	if(parameter1 > 0):
		sum = 0
		for i in range(parameter1):
			sum = sum + i
			
		return sum
	else:
		return -1
```

```python
def iteration2(parameter1):
	if(parameter1 > 0):
		num1 = 0
		num2 = 1
		for i in range(parameter1):
			temp = num2
			num2 = num2 + num1
			num1 = temp
		return num2
	else:
		return -1
```

String Manipulation

```python
def string_manipulation1(parameter1):
	vowels = ['a', 'e', 'i', 'o', 'u']
	new_string = ""
	for i in parameter1
		if i not in vowels:
			new_string = new_string + i
	
	return new_string
```

```python
def string_manipulation2(parameter1, parameter2):
	new_string = ""
	for i in parameter1:
		if i not in parameter2:
			new_string = new_string + i
	
	return new_string
```

Object Oriented Programming

```python
class Car:
	def __init__(self, battery):
		self.battery = battery
		
	def charge(self, charge):
		self.battery = self.battery + charge
		
		
class ChargingStation:
	def __init__(self, battery):
		self.battery = battery
	
	def charge(self, charge):
		self.battery = self.battery + charge
	
	def decharge(self, charge):
		self.battery = self.battery - charge
	
	def charge_car(self, car, charge):
		if(self.battery > charge):
			car.charge(charge)
			self.decharge(charge)
			return True
		else:
			return False
			
	# we need to initialize some objects before passing it to the function
	def OOP1(car, charging_station, charge):
		return charging_station.charge_car(car, charge)
```

```python
import random
class PflixAccount:
	def __init__(self, list_movies, list_watched_movies):
		self.list_of_movies = list_of_movies
		self.watched_movies = watched_movies
		
	def have_watched(self, movie):
		if movie in watched_movies:
			return False
		else:
			return True
			
	def recommend(self):
		random_num = random.randint(0, len(list_of_movies)-1)
		return list_movies[random_num]
		

def OOP2(pflixAccount, movie):
	return pflixAccount.have_watched(movie)
	
```

List & Dictionary

```python
def dictionary1(parameter1):
	dictionary = {}
	for i in range(parameter):
		key = i
		value = str(i) + str(i)
		dictionary[key] = value
	
```

```python
def dictionary2(dictionary, keys):
	for key in keys: 
		if key not in dictionary:
			return false
	return true
```

Searching & Sorting

```python
def searching_and_sorting1(list1, list2, num_com_elm):
	tmp = 0
	for elem1 in list1:
		for elem2 in list2:
			if elem1 == elem2:
				tmp = tmp + 1
	if (tmp >= num_com_elm):
		return True
	else:
		return False
```

```python
def searching_and_sorting2(list1):
	list_odd_numbers = []
	list_even_numbers = []
	for elem in list1:
		if elem % 2 == 1:
			list_odd_numbers.append(elem)
		if elem % 2 == 0:
			list_even_numbers.append(elem)
	
	return (list_odd_numbers, list_even_numbers)
		
```